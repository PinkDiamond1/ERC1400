// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddUserWallet extends ethereum.Event {
  get params(): AddUserWallet__Params {
    return new AddUserWallet__Params(this);
  }
}

export class AddUserWallet__Params {
  _event: AddUserWallet;

  constructor(event: AddUserWallet) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get securityTokens(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }

  get stableCoins(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }
}

export class RemoveUserWallet extends ethereum.Event {
  get params(): RemoveUserWallet__Params {
    return new RemoveUserWallet__Params(this);
  }
}

export class RemoveUserWallet__Params {
  _event: RemoveUserWallet;

  constructor(event: RemoveUserWallet) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AddUserTokens extends ethereum.Event {
  get params(): AddUserTokens__Params {
    return new AddUserTokens__Params(this);
  }
}

export class AddUserTokens__Params {
  _event: AddUserTokens;

  constructor(event: AddUserTokens) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get securityTokens(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }

  get stableCoins(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }
}

export class RemoveUserTokens extends ethereum.Event {
  get params(): RemoveUserTokens__Params {
    return new RemoveUserTokens__Params(this);
  }
}

export class RemoveUserTokens__Params {
  _event: RemoveUserTokens;

  constructor(event: RemoveUserTokens) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get securityTokens(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }

  get stableCoins(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }
}

export class UserWallets__checkWalletsForTokensResult {
  value0: Array<boolean>;
  value1: Array<boolean>;

  constructor(value0: Array<boolean>, value1: Array<boolean>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBooleanArray(this.value0));
    map.set("value1", ethereum.Value.fromBooleanArray(this.value1));
    return map;
  }
}

export class UserWallets__getUserWalletResult {
  value0: Array<Address>;
  value1: Array<Address>;

  constructor(value0: Array<Address>, value1: Array<Address>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromAddressArray(this.value1));
    return map;
  }
}

export class UserWallets extends ethereum.SmartContract {
  static bind(address: Address): UserWallets {
    return new UserWallets("UserWallets", address);
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  checkInStableCoinWallet(_user: Address, _tokenAddress: Address): boolean {
    let result = super.call(
      "checkInStableCoinWallet",
      "checkInStableCoinWallet(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromAddress(_tokenAddress)
      ]
    );

    return result[0].toBoolean();
  }

  try_checkInStableCoinWallet(
    _user: Address,
    _tokenAddress: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkInStableCoinWallet",
      "checkInStableCoinWallet(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromAddress(_tokenAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  checkInSecurityTokenWallet(_user: Address, _tokenAddress: Address): boolean {
    let result = super.call(
      "checkInSecurityTokenWallet",
      "checkInSecurityTokenWallet(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromAddress(_tokenAddress)
      ]
    );

    return result[0].toBoolean();
  }

  try_checkInSecurityTokenWallet(
    _user: Address,
    _tokenAddress: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkInSecurityTokenWallet",
      "checkInSecurityTokenWallet(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromAddress(_tokenAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  checkWalletsForTokens(
    _user: Address,
    _securityTokens: Array<Address>,
    _stableCoins: Array<Address>
  ): UserWallets__checkWalletsForTokensResult {
    let result = super.call(
      "checkWalletsForTokens",
      "checkWalletsForTokens(address,address[],address[]):(bool[],bool[])",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromAddressArray(_securityTokens),
        ethereum.Value.fromAddressArray(_stableCoins)
      ]
    );

    return new UserWallets__checkWalletsForTokensResult(
      result[0].toBooleanArray(),
      result[1].toBooleanArray()
    );
  }

  try_checkWalletsForTokens(
    _user: Address,
    _securityTokens: Array<Address>,
    _stableCoins: Array<Address>
  ): ethereum.CallResult<UserWallets__checkWalletsForTokensResult> {
    let result = super.tryCall(
      "checkWalletsForTokens",
      "checkWalletsForTokens(address,address[],address[]):(bool[],bool[])",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromAddressArray(_securityTokens),
        ethereum.Value.fromAddressArray(_stableCoins)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new UserWallets__checkWalletsForTokensResult(
        value[0].toBooleanArray(),
        value[1].toBooleanArray()
      )
    );
  }

  getUserWallet(_user: Address): UserWallets__getUserWalletResult {
    let result = super.call(
      "getUserWallet",
      "getUserWallet(address):(address[],address[])",
      [ethereum.Value.fromAddress(_user)]
    );

    return new UserWallets__getUserWalletResult(
      result[0].toAddressArray(),
      result[1].toAddressArray()
    );
  }

  try_getUserWallet(
    _user: Address
  ): ethereum.CallResult<UserWallets__getUserWalletResult> {
    let result = super.tryCall(
      "getUserWallet",
      "getUserWallet(address):(address[],address[])",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new UserWallets__getUserWalletResult(
        value[0].toAddressArray(),
        value[1].toAddressArray()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class SetNewOwnerCall extends ethereum.Call {
  get inputs(): SetNewOwnerCall__Inputs {
    return new SetNewOwnerCall__Inputs(this);
  }

  get outputs(): SetNewOwnerCall__Outputs {
    return new SetNewOwnerCall__Outputs(this);
  }
}

export class SetNewOwnerCall__Inputs {
  _call: SetNewOwnerCall;

  constructor(call: SetNewOwnerCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetNewOwnerCall__Outputs {
  _call: SetNewOwnerCall;

  constructor(call: SetNewOwnerCall) {
    this._call = call;
  }
}

export class AddUserWalletCall extends ethereum.Call {
  get inputs(): AddUserWalletCall__Inputs {
    return new AddUserWalletCall__Inputs(this);
  }

  get outputs(): AddUserWalletCall__Outputs {
    return new AddUserWalletCall__Outputs(this);
  }
}

export class AddUserWalletCall__Inputs {
  _call: AddUserWalletCall;

  constructor(call: AddUserWalletCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _securityTokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _stableCoins(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }
}

export class AddUserWalletCall__Outputs {
  _call: AddUserWalletCall;

  constructor(call: AddUserWalletCall) {
    this._call = call;
  }
}

export class RemoveUserWalletCall extends ethereum.Call {
  get inputs(): RemoveUserWalletCall__Inputs {
    return new RemoveUserWalletCall__Inputs(this);
  }

  get outputs(): RemoveUserWalletCall__Outputs {
    return new RemoveUserWalletCall__Outputs(this);
  }
}

export class RemoveUserWalletCall__Inputs {
  _call: RemoveUserWalletCall;

  constructor(call: RemoveUserWalletCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveUserWalletCall__Outputs {
  _call: RemoveUserWalletCall;

  constructor(call: RemoveUserWalletCall) {
    this._call = call;
  }
}

export class AddUserTokensCall extends ethereum.Call {
  get inputs(): AddUserTokensCall__Inputs {
    return new AddUserTokensCall__Inputs(this);
  }

  get outputs(): AddUserTokensCall__Outputs {
    return new AddUserTokensCall__Outputs(this);
  }
}

export class AddUserTokensCall__Inputs {
  _call: AddUserTokensCall;

  constructor(call: AddUserTokensCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _securityTokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _stableCoins(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }
}

export class AddUserTokensCall__Outputs {
  _call: AddUserTokensCall;

  constructor(call: AddUserTokensCall) {
    this._call = call;
  }
}

export class RemoveUserTokensCall extends ethereum.Call {
  get inputs(): RemoveUserTokensCall__Inputs {
    return new RemoveUserTokensCall__Inputs(this);
  }

  get outputs(): RemoveUserTokensCall__Outputs {
    return new RemoveUserTokensCall__Outputs(this);
  }
}

export class RemoveUserTokensCall__Inputs {
  _call: RemoveUserTokensCall;

  constructor(call: RemoveUserTokensCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _securityTokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _stableCoins(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }
}

export class RemoveUserTokensCall__Outputs {
  _call: RemoveUserTokensCall;

  constructor(call: RemoveUserTokensCall) {
    this._call = call;
  }
}
