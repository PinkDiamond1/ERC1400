type UserWallet @entity {
  id: ID!
  stableCoins: [UserStableCoinBalance!]!
  securityTokens: [UserSecurityTokenBalance!]!
  stTransactionHistories: [STTransactionHistory!]!
  scTransactionHistories: [SCTransactionHistory!]!
}

type StableCoin @entity {
   id: ID!
   symbol: String!
   name: String!
   decimals: BigInt!
   balances: [UserStableCoinBalance!]! @derivedFrom(field:"stableCoin")
 }

type SecurityToken @entity {
   id: ID!
   symbol: String!
   name: String!
   decimals: BigInt!
   balances: [UserSecurityTokenBalance!]! @derivedFrom(field:"securityToken")
 }

type UserSecurityTokenBalance @entity {
    id: ID!
    securityToken: SecurityToken!
    partitions: [PartitionBalance!]!
 }

type PartitionBalance @entity {
    id: ID!
    amount: BigInt!
 }

type Hold @entity {
    id: ID!
    amount: BigInt!
    account: String!
    recipient: String!
    notary: String!
    expirationDateTime: BigInt!
    lockHash: String!
    userStablecoinBalance: UserStableCoinBalance!
    released: Boolean!
 }

type UserStableCoinBalance @entity {
    id: ID!
    amount: BigInt!
    hold: BigInt!
    holds: [Hold!]! @derivedFrom(field:"userStablecoinBalance")
    stableCoin: StableCoin!
 }

 type STTransactionHistory @entity {
    id: ID!
    to: String!
    from: String!
    amount: BigInt!
    transactionReferenceType: String!
    balance: BigInt!
    timestamp: BigInt!
    partition: String!
    securityToken: SecurityToken!
 }

 type SCTransactionHistory @entity {
    id: ID!
    to: String!
    from: String!
    amount: BigInt!
    transactionReferenceType: String!
    balance: BigInt!
    timestamp: BigInt!
    stableCoin: StableCoin!
 }
